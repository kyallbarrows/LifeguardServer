<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
                   assembly="Parichay.Security"
                   namespace="Parichay.Security.Entity">
    <!--
        NOTE: lazy="false" was added to fix a problem with NHibernate 1.2 Beta 2 where the property
              Id is expected to be virtual. This seems to be because by default 1.2 assumes all objects
              are proxy-ready.
    -->
    <class name="Role" table="aspnet_role" lazy="false">
        <!-- Primary key is auto-generated by the database's native method. -->
        <id name="Id">
            <generator class="native">
                <!-- Used for Oracle tests, does not affect MS SQL. -->
                <param name="sequence">Role_Id_SEQ</param>
            </generator>
        </id>
        <property name="Name" />
        <property name="LoweredName" />
        <property name="Description" />
        <bag name="Applications" table="aspnet_applicationrole" cascade="none" lazy="false" inverse="false" fetch="join">
            <key column="RoleId" />
            <many-to-many column="ApplicationId" class="Application" />
        </bag>
    </class>

    <!--
        Queries used for support of base provider logic, which is assumes relationships are for a single
        web application. Therefore, in cases where lists are the result they are assumed for a given
        application identifier.
    -->
  <query name="Role.FindAll">
    <![CDATA[
              from Role
        ]]>
  </query>
    <query name="Role.ByLoweredName">
        <![CDATA[
             from Role as role
            where role.LoweredName = ?
        ]]>
    </query>

    <!--
        Queries used for support of multi-web application implementations where a single management console
        is used for all managed applications. This allows for use of a single pool of users/roles for multiple
        applications.
    -->
    <query name="Role.GetAllRoleNames">
        <![CDATA[
            select role.Name
              from Role as role
        ]]>
    </query>
</hibernate-mapping>